from pymongo import MongoClient
import json
import datetime

# Class implemented to do mongodb-related functions
# Still contains useless functions that will be removed
class database_handler(object): 
	# Initialization of database connection
	def __init__(self, ip, port):
		self.mongoclient = MongoClient(ip, port)

		# MIGHT NEED TO BE REFRESHED?
		self.category_db = self.mongoclient.category

	# Returns all data in a collection 
	def print_data(self, collection):
		return [items for items in collection.find({})]

	# Clears an entire collection and prints the ammount of objects removed
	def clear_collection(self, collection):
		cnt = 0

		for item in collection.find({}):
			collection.remove(item)
			cnt += 1

		if cnt > 0:
			print "Cleared %d elements in the collection" % cnt
		else:
			print "Nothing to clear."

	# Removes a single datapoint based on the datareference. 
	def remove_one(self, collection, id):
		data = collection.find_one({'_id': id})

		if data is not None:
			collection.remove({'_id': id})

	def get_available_category_collections(self):
		category_collection = self.category_db.collection_names(include_system_collections=False)
		return category_collection

	# Adds data to a category and returns the ID generated by MongoDB
	def add_new_category_data(self, database, category, name, ip="", url="", hash=""):
		collection = database[category]

		# Make it able to add as well :O
		# To create a new object
		category_data = {
				"name": name,
				"ips": [],
				"urls": [],
				"filehash": []
		}

		# Add check for multiple urls and hashes? idk
		if ip:
			category_data["ips"].append(ip)
		if url:
			category_data["urls"].append(url)
		if hash:
			category_data["filehash"].append(hash)

		return_id = collection.insert_one(category_data).inserted_id
		return return_id

	# Adds an IP. Should be made generic to contain other sources like URL and filehash
	def add_new_ip(self, database, ip_collection, category_db, ip, category="", name=""):
		# Creates category if POST request in server.py
		category_id = ""
		if category and name:
		    category_id = self.add_new_category_data(category_db, category, name, ip=ip) 


		# Base information to add to a colleciton
		tmp_data = {
			"ip": "%s" % ip,
			"containers": [],
			"addeddate": "%s" % datetime.datetime.utcnow(),
			"modifieddate": "%s" % datetime.datetime.utcnow()
		}

		if category_id:
			tmp_data["containers"].append({"name": name, \
				"category": category, "mongo_id": category_id})

		return ip_collection.insert_one(tmp_data).inserted_id

	def find_category_object(self, collection, id):
		data = collection.find_one({"_id": id})
		return data

	# Finds a single p in a collection - make generic
	def find_ip_object(self, collection, ip):
            return collection.find_one({"ip": ip})

	# Made to test listsa - Needs to contain category and stuff
	def get_data(self):
		return open("blocklist.php", "r").readlines()

	def generate_test_data(self):
		ips = []
		ip = "192.168.0."
		for i in range(0, 254):
			ips.append(ip+str(i))

		return ips

	# Test function to test mongodb connection functionality	
	def test_func(self):
		db = self.mongoclient.ip
		category_db = self.mongoclient.category

		#testdata = self.generate_test_data()
		testdata = self.generate_test_data()
		category = "c2"
		name = "zeus"

		#self.clear_collection(db.ips)

		cnt = 0
		# Generate other data first to append to the IP-range
		for ip in testdata:
			ip = ip[:-1]
			data = self.add_new_ip(db, db.ips, category_db, ip, \
			category=category, name=name)

			if data:
				cnt += 1

		if cnt > 0:
			print "Added %d elements to %s" % (cnt, "ips")
		else:
			print "All data already in database."


		# Categories in both DBs printed
		"""
		ip_collection = db.collection_names(include_system_collections=False)
		category_collection = category_db.collection_names(include_system_collections=False)
		for collect in ip_collection:
			print collect
		for collect in category_collection:
			print collect
		"""

		# Attempt updating an item
		#post = db.ips.find_one({"ip": "101.200.81.187"}) 
		exit()
		print self.find_ip_object(db.ips, "101.200.81.187")
			
		if post is not None:
			id = post["_id"]
			post["ip"] = "1.2.3.4"
			post["modifieddate"] = "\"%s\"" % datetime.datetime.now()
			db.ips.save(post)

			#print db.ips.find_one({"_id": id})


# TEEEEST :D
if __name__ == "__main__":
	#app.run(debug=True)
	mongodbserver = '127.0.0.1'
	mongodbport = 27017
	print "Connecting to mongodb at %s:%d" % (mongodbserver, mongodbport)

	client = database_handler(mongodbserver, mongodbport)
	client.test_func()
