from pymongo import MongoClient
import json
import datetime


# Class implemented to do mongodb-related functions
# Still contains useless functions that will be removed
class database_handler(object): 
	# Initialization of database connection
	def __init__(self, ip, port):
		self.ip_cnt = 0
		self.mongoclient = MongoClient(ip, port)

	# Returns all data in a collection 
	def print_data(self, collection):
		return [items for items in collection.find({})]

	# Clears an entire collection and prints the ammount of objects removed
	def clear_collection(self, collection):
		cnt = 0

		for item in collection.find({}):
			collection.remove(item)
			cnt += 1

		print "Cleared %d elements in the collection" % cnt

	# Removes a single datapoint based on the datareference. 
	def remove_one(self, collection, data=""):
		data = collection.find(data)
		print collection["name"]
		collection.remove(data) 

	# Adds data to a category and returns the ID generated by MongoDB
	def add_category_data(self, database, ip, category, name):
		collection = database[category]
		category_data = collection.find({"name": "%s" % name})

		# To create a new object
		if category_data.count() == 0:
			category_data = {
				"name": name,
				"ips": [],
				"urls": [],
				"filehash": []
			}
		# Three main categories - ip, url and hash
		else:
			self.remove_one(collection, data={"name": name})
			if ip and ip not in category_data["ip"]:
				category_data["ip"].append(ip)
			if url and url not in category_data["url"]:
				category_data["url"].append(url)
			if filehash and filehash not in category_data["filehash"]:
				category_data["filehash"].append(ip)

		# Posts the data generated back for usage in add_new_ip 
		post_id = collection.insert_one(category_data).inserted_id
		return post_id

	# Adds an IP. Should be made generic to contain other sources like URL and filehash
	def add_new_ip(self, database, collection, ip, category="", name="", id=0):
		data = collection.find({"ip": "%s" % ip})
		verify = ""

		# Creates category if POST request in server.py
		if category and name:
			verify = self.add_category_data(database, ip, category, name) 

		# Base information to add to a colleciton
		toadd_data = {
			"ip": "%s" % ip,
			"id": "%d" % self.ip_cnt,
			"containers": [],
			"addeddate": datetime.datetime.utcnow(),
			"modifieddate": datetime.datetime.utcnow()
		}

		# Modify data if item exists and category is present
		if data.count() != 0:
			if verify:
				self.remove_one(collection, data={"ip": ip})
				data["containers"].append({"name": name, "category": category, "mongo_id": verify})

			return False

		### Something wrong with the logic here ^v

		if verify:
			data[containers].append({"name": name, "category": category, "mongo_id": verify})

		# Adds it :)
		post_id = collection.insert_one(data).inserted_id

		# This ID sucks.
		self.ip_cnt += 1
		return post_id

	# Made to test listsa - Needs to contain category and stuff
	def get_data(self):
		return open("blocklist.php", "r").readlines()

	# Finds a single p in a collection - make generic
	def find_object(self, collection, ip):
		return collection.find({"ip": ip})

	# Generates some sample data to test the DB - Not currently used
	def generate_test_data(self):
		ips = []
		ip = "192.168.0."
		for i in range(0, 254):
			ips.append(ip+str(i))

			return ips

	# Test function to test mongodb connection functionality	
	def test_func(self):
		db = self.mongoclient.ip
		#testdata = self.generate_test_data()
		testdata = self.get_data()
		category = "c2"
		name = "zeus"

		self.clear_collection(db.ips)

		cnt = 0
		# Generate other data first to append to the IP-range
		for ip in testdata:
			if self.add_new_ip(db, db.ips, ip, category=category, name=name, id=cnt):
				cnt += 1

			if cnt > 0:
				print "Added %d elements to %s" % (cnt, "ips")
			else:
				print "All data already in database."

			for items in self.print_data(db.ips):
				print items
		exit()

# TEEEEST :D
if __name__ == "__main__":
	#app.run(debug=True)
	mongodbserver = '192.168.1.129'
	mongodbport = 27017
	print "Connecting to mongodb at %s:%d" % (mongodbserver, mongodbport)

	client = database_handler(mongodbserver, mongodbport)
	client.test_func()
